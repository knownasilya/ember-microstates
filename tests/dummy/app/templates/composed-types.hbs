<header>
  <h1>Composed Types</h1>
  <div class="intro">
    <p>Composed Types allow to create types that consist of other types.</p>
  </div>
</header>

<Section 
  id="transitions-and-getters"
  @title="Transitions and Getters"
  as |s|
>
  <s.notes>
    <p>
      Composed types allow you to co-locate transitions that you can perform on composed types with computations that you can derive from these types.
    </p>
    <p>
      <strong>Transitions</strong>: microstates created from composed types will have transitions that are defined as type's methods and a <i>set</i> transition. 
      Any transition on the microstate can be bound directly to the action helper.
    </p>
    <p>
      <strong>Memoized Getters</strong>: microstates allow you to define getters on the microstate type. 
      Unlike Computed Properties, they are not cached per dependant key. 
      These getters are memoized per microstate instance. 
      Making Memoized Getters cached per dependant key is something that we're considering for the future.
    </p>
  </s.notes>
  <s.demo>
    <s.live @class="mb-4">
      {{!BEGIN-SNIPPET simple-person-demo}}
      {{#let 
        (state (type "simple-person") (object firstName="Homer" lastName="Simpson")) 
        as |person|
      }}
        <input
          placeholder="first name"
          value={{person.firstName.state}}
          oninput={{tval person.firstName.set}}
        />
        <input
          placeholder="last name"
          value={{person.lastName.state}}
          oninput={{tval person.lastName.set}}
        />
        <button {{on "click" (fn person.changeIdentity "Bart" "Simpson")}} type="button">Change to Bart</button>
        <p>Full Name: {{person.fullName}}</p>
        <ValueBadge @value={{value-of person}} />
      {{/let}}
      {{!END-SNIPPET}}
    </s.live>
    <s.code>
      <h3 class="mb-2">Person Type</h3>
      <CodeSnippet @name="simple-person-type.js"/>     
      <h3 class="my-2">Template</h3>
      <CodeSnippet @name="simple-person-demo.hbs"/>
    </s.code>
  </s.demo>
</Section>

<Section
  id="recursive"
  @title="Recursive Types"  
  as |s|
>
  <s.notes>
    <p>
      Microstates can express recursive data structures. This is made possible by the fact that
      Microstates are lazy, they reflect their value and types can be self referencing. With Microstates,
      it's easy to express tree structures with very little code.
    </p>
    <h4 class="my-2">In this demo</h4>
    <ul>
      <li>You can add child items to each node with <FaIcon @icon="plus"/>.</li>
      <li>You can collapse and open each node with <FaIcon @icon="plus-square"/> and <FaIcon @icon='minus-square'/></li>
      <li>You can increment and decrement values with <FaIcon @icon="caret-up"/> and <FaIcon @icon="caret-down"/>.</li>
      <li>You can delete a node with <FaIcon @icon="trash"/>.</li>
      <li>Adding a child to a node, automatically opens it.</li>
    </ul>
  </s.notes>
  <s.demo>
    <s.live>
      {{!BEGIN-SNIPPET tree-demo}}
      {{#let (state (type "node") this.treeInitial) as |node|}}
        <Tree @node={{node}} />
        <ValueBadge @value={{value-of node}} />
      {{/let}}
      {{!END-SNIPPET}}
    </s.live>
    <s.code>
      <h3>Template</h3>
      <p>Let's start the tree by rendering the root node.</p>
      <CodeSnippet @name="tree-demo.hbs"/>
      <h3>Type</h3>
      <p>The type references itself and uses parameterized array of type <i>Node.</i></p>
      <CodeSnippet @name="node.js"/>
      <h3>Component</h3>
      <CodeSnippet @name="tree.hbs"/>
    </s.code>    
  </s.demo>
</Section>

<Section 
  id="data-down-actions-up"
  @title="Data Down Actions Up for State"
  as |s|
>
  <s.notes>
    <p>
      Microstates allows you to simplify and externalize your component state. 
      This gives you the flexibility of performing very complex state refactoring very easily. 
      Often, you can avoid changing template or change very little to accomplish your refactor.
    </p>
    <p>
      In this example, I'm showing how you can create a component that can work independantly
      but also works when its state is managed by the context. Composing state at this level,
      allows the context to derive state and perform transitions on the state of the components 
      without modifying the component.
    </p>
    <h4 class="my-2">In this demo</h4>
    <ul>
      <li>
        You can add a new list. You can see how validation works in microstates. 
        The button should be disabled when the input field matches name of an existing list.
      </li>
      <li>
        <i>All</i>, <i>Active</i> and <i>Completed</i> buttons will change state of all lists.
      </li>
      <li>
        <i>Completed All</i> shows aggregated value from all lists. When you click on this button,
        it'll complete items in all lists.
      </li>
    </ul>
  </s.notes>
  <s.demo>
    <s.live @class="mb-4">
      {{!BEGIN-SNIPPET many-todomvc-template}}
      {{#let (state (type "todomvc-manager") this.todomvcManagerInitial) as |manager|}}
        <form class="manager-form" {{on "submit" manager.addList}}>
          <input
            value={{manager.newListTitle.state}} 
            oninput={{tval manager.newListTitle.set}}
          >
          <button disabled={{not manager.isValid}} type="button">Create</button>
          <button {{on "click" (fn manager.show "")}} type="button">All</button>
          <button {{on "click" (fn manager.show "active")}} type="button">Active</button>
          <button {{on "click" (fn manager.show "completed")}} type="button">Completed</button>
          {{#if manager.remaining}}
            <button {{on "click" manager.completeRemaining}} type="button">
              <i class="badge">{{manager.remaining}}</i>Complete All
            </button>
          {{/if}}
        </form>
        <section>
          {{#each manager.lists key="title.state" as |list|}}
            <Todomvc @todomvc={{list}} />
          {{/each}}
        </section>
      {{/let}}
      {{!END-SNIPPET}}
    </s.live>
    <s.code>
      <h3>Component JavaScript</h3>
      <p>
        <i>state</i> computed property macro allows you to create state that is consumed when the component owns its state.
        When the component's state is owned by the context, this props is overwritten by state passed to the component.
      </p>
      <CodeSnippet @name="todomvc-component-javascript.js"/>
      <h3>Type</h3>
      <p>
        The parent type has access to each child state. It can derive state using getters. In the case of <i>remaining</i>,
        we reach into each state and calculate the number of remaining items. Same technique is used to perform transitions
        child microstates. <i>completeRemaining</i> transition maps over the todo lists and invokes <i>toggleAll</i> on each 
        list.
      </p>
      <CodeSnippet @name="many-todomvc-type.js"/>
      <h3>Template</h3>
      <p>
        In the template, we iterate over the list of TodoMVC microstates and pass each microstate to the TodoMVC component.
        The component consumes this state as it's own, without requiring modification of the component. 
      </p>
      <CodeSnippet @name="many-todomvc-template.hbs"/>
    </s.code>
  </s.demo>
</Section>